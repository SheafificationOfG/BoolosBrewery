from itertools import permutations, product
from math import comb as comb_number

from strats import *

keys = 0x100300901b0520530f90fa01c05405510010105610210310401d05705810810905910b10d00a01e05a05b05c11411511601f05d05e11a11b11c05f11d11e11f02006006112412506212612712800b02106306406512f13013102206606713513613706813813913a02306906a13f14006b14114214300400c02406c06d06e14a14b14c02506f07015015115207115415502607207315a15b07415c15d15e00d02707507607716516616702807807916b16c16d07a16e17002907b07c17417517607d00e02a07e07f08018018118202b08108218718808318918a18b02c08408518f19108619319400500f02d08708808919b19c19d02e08a08b1a21a308c1a41a51a602f08d08e1ab1ac08f1ad1ae1af0100300900910921b61b71b80310930941bc1bd0951bf1c10320960971c61c70981c81c91ca01103309909a09b1d11d21d303409c09d1d71d809e1da1dc03509f0a01e11e20a11e41e5
vals = 
data = dict((keys // 4096**i % 4096, vals // 16**(37*i) % 16**37) for i in range(231))

def get_combination_by_index(n, index):
    combination = []
    current_index = index
    k = 0

    while True:
        if current_index < comb_number(n, k):
            break
        current_index -= comb_number(n, k)
        k += 1

    remaining_elements = k

    for i in range(n):
        if remaining_elements == 0:
            break

        comb_with_i = comb_number(n - i - 1, remaining_elements - 1)
        if comb_with_i <= current_index:
            current_index -= comb_with_i
        else:
            combination.append(i)
            remaining_elements -= 1

    return tuple(combination)


data_table = {
    k: dat if dat < 24 else (get_combination_by_index(144, dat // 4), dat % 4)
    for k, dat in data.items()
}

respuestas_list = [
    Foo,
    Bar,
    Baz,
]
fields_list = [
    "Math",
    "Phys",
    "Phil",
    "Engg",
]
personas_list = [
    Alice,
    Bob,
    Charlie,
    Dan,
]

# f = order of responses      i = the order of the persons
perm_escenarios = list(product(permutations(range(3)), permutations(range(4))))


def get_question(node):
    final_question = "False"
    for var in node[0]:
        orden_respuestas, orden_fields = perm_escenarios[var]
        question = "True"

        for persona, orden_field, field, orden_respuesta in zip(personas_list, orden_fields, fields_list, orden_respuestas):
            question += f" and ({persona} studies {fields_list[orden_field]})"
            if field != "Engg":
                question += f' and ("{field}: 1?" is {respuestas_list[orden_respuesta]})'

        final_question += f" or ({question})"

    return node[1], final_question


class Strategy(Hard):
    question_limit = 5

    def solve(self):
        nodo_actual = 1

        while isinstance(data_actual := data_table[nodo_actual], tuple):
            asker, question = get_question(data_actual)
            nodo_actual *= 3
            nodo_actual += respuestas_list.index(self.get_response(personas_list[asker].ask(question)))

        for game_persona, field in zip(personas_list, perm_escenarios[data_actual][1]):
            self.guess[game_persona] = Field(fields_list[field])
