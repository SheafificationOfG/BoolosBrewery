from itertools import permutations, product
from strats import *
from math import comb as comb_number


# This is a slightly optimized version of ganitsu_simple_sat.

# Most of the improvement comes from the compression of data dict.
# Othwerise I tried to remove redundanc y

data = {1: (260921280343613508858417787459715793582625, 2),
 3: (841411308272750671623757569173550866527295, 3),
 9: (14978546109522134555124641560575532973100, 1),
 27: (14277958740259809519326149717142067013424116, 0),
 (82, 250, 312, 340, 372, 393, 429, 456, 466): 13,
 83: (22300672741619926704831511229401816123982481, 1),
 (249, 91, 99, 341, 374, 394, 431, 457, 467): 15,
 28: (797940980354365187085349142751247904, 0),
 (84, 277, 285, 332, 337, 365, 395, 427, 458, 465): 3,
 85: (22300745198051213981430374619339989292514373, 0),
 (256, 287, 314, 126, 439): 0,
 (257, 286, 313, 386, 438): 6,
 86: (22263036537446511546780181048374259680637901, 0),
 (258, 276, 100, 305, 364, 129, 428, 150, 472): 9,
 (259, 278, 303, 338, 373, 392, 430, 153, 481): 1,
 (260, 90, 304, 336, 348, 391, 449, 159, 482): 7,
 29: (4960086978934383594793941193906450900425, 2),
 (87, 283, 321, 117, 366, 125, 144): 2,
 88: (22291220830615394694005797966969740721793549, 2),
 (264, 311, 419): 22,
 (265, 93, 322, 127, 440): 8,
 89: (22300579340369068977383594486073322788282027, 2),
 (267, 282, 323, 385, 154): 14,
 (269, 284, 105, 384, 145): 12,
 10: (40990047226188525682547251446591164713, 0),
 30: (20565424356906036912297664906961922173782208, 1),
 92: (22300745194395685282333824565739479219068367, 0),
 31: (2668897766487880317576536916483726739, 0),
 94: (22300738727865686082960751420118985332240411, 2),
 95: (22300745186887383143685305432147567626419510, 1),
 32: (16234875123489465436874174516340122733288, 0),
 (96, 123, 413, 455, 484): 10,
 97: (22300374030551938890344695330389195844680963, 0),
 (292, 350, 412, 445, 156): 5,
 (293, 114, 411, 444, 471): 11,
 98: (22300745198373140157387157632556047032212843, 2),
 (294, 346, 141, 147, 476): 17,
 (295, 347, 135, 447, 474): 16,
 (296, 349, 136, 454, 485): 4,
 11: (55433253841838657993688116007613645373647, 1),
 33: (4358841205527549855070531796350910340650069, 3),
 101: (21807559945139622800982639383880927141401604, 0),
 34: (1825702485526884779154822473284176591018132, 1),
 (102, 109, 118, 404, 138): 18,
 103: (22200712253922129125029721218060216699596801, 2),
 (309, 111, 120, 363, 368, 132, 418): 23,
 (310, 331, 358, 403, 422): 20,
 104: (22300403524263126147150468377618395791595497, 0),
 35: (21308971020217283433751572274425249921880, 1),
 106: (22300745036062237616249070155419449620752024, 1),
 (319, 108, 359, 401, 421): 21,
 (320, 330, 357, 399, 420): 19,
 107: (22300743192136159772005934617093926821826497, 2),
 4: (13361694140280146956033940828434260014, 0),
 12: (1000074474530928418615973222332284806, 3),
 36: (21205979207307851644484050106049704498201319, 1),
 110: (22300714345441884644964030348954971828009536, 1),
 37: (5821582845926426950398001521137068922, 3),
 112: (22300730933615568009764897418176691247113750, 0),
 113: (22300728649229390846258394499714963929126827, 3),
 38: (33880997140791186618462808257493242559368, 3),
 115: (22290278810871284778959708549476930700182270, 3),
 116: (22299119115735612601707115716242525600135542, 0),
 13: (107623669586600748362526137036990, 3),
 39: (16231413539936968775202597889285240516357359, 1),
 119: (22294556049942304996738726964682149910680846, 1),
 40: (161266874776048543164322166447703042986, 0),
 121: (7016167915772941664091901884745470371631224, 3),
 122: (22300744333386859260295933764193579424447279, 1),
 41: (409537622583563663464597195290911077965, 0),
 124: (22300632714788879333130715566078049619891738, 1),
 14: (9563557798875229365906322727699394228, 1),
 42: (3144466096046955209959723389191015570592533, 0),
 128: (21254333380567135572682024799262566441224520, 1),
 43: (3555819850852517503539460392713107882744, 0),
 130: (22300745193243853383353374923527802479215155, 0),
 131: (22300551763174774738583482229851346826165239, 3),
 44: (60596884402323628212574059220043302, 2),
 133: (22289099649843277231179320462254589987271588, 3),
 134: (22243931138090171511678277472363426532100447, 2),
 5: (75914411715730524847998984627345564651370, 1),
 15: (252888134122828533256095664822623024450, 3),
 45: (11652667249784295685041187518429126600360961, 2),
 137: (22275958700737346967317886081999546124150570, 0),
 46: (3814971940031002117074461966875998453197, 2),
 139: (22298651175603924106221347790857263844956792, 2),
 140: (22300726417536957113241900659274848885417047, 1),
 47: (4578297944191139923404649304417216088859, 3),
 142: (22297023000115591586233764039548234402322247, 0),
 143: (22300732875556862043478608332697128951648736, 1),
 16: (27490544266600467733700266700807857294458, 0),
 48: (1602317626895267717089595515976047503637191, 2),
 146: (22278062420623746497630591313942158491470090, 0),
 49: (281471632939109083272448918209611699872075, 3),
 148: (22296988580629712647716687824469793827251047, 3),
 149: (22300690394298297558389305524709723157988299, 3),
 50: (614917349741827844117546675760945861865641, 0),
 151: (22300649194018948939306006165870701814889166, 2),
 152: (22300742896208940801267700417324719631951335, 3),
 17: (12790377225386209966524760500847998528540, 0),
 51: (111262601708676531585344860020176941679130, 1),
 155: (22300745198523374879550450432818704052967816, 3),
 52: (39294189108962703377833411619585556389, 3),
 157: (22300581385396690248821744618473217958007447, 3),
 158: (22300664417318391052133164663673219798319155, 3),
 53: (1414878349319839141322185973011713136285, 0),
 160: (22300743717215678358014216260397256992623536, 1),
 161: (3106655979575648570560098741967680839424952, 2)
 }


fields = "Math", "Phys", "Phil", "Engg" # Could be removed if there was a robust way of mapping to the actual classes.
personas = Alice, Bob, Charlie, Dan
responses = Foo, Bar, Baz

perm_scenarios = list(
    product(
        permutations(responses),
        permutations(fields)
    )
)

def get_combinations(i, n=144):
    combinations=[]
    k=0
    while i>=(comb_num:=comb_number(n,k)):
        i-=comb_num
        k+=1
    for j in range(n):
        if not k: break
        if (cw:=comb_number(n-j-1,k-1))<=i:
            i-=cw
        else:
            combinations.append(j)
            k-=1
    return tuple(combinations)


data_table = {}
for k, dat in data.items():
    if isinstance(k, tuple):
        for k_i in k:
            data_table[k_i] = dat
    else:
        data_table[k] = get_combinations(dat[0]), personas[dat[1]]

class Strategy(Hard):
    engg_question_limit = 2

    def solve(self):
        nodo_actual = 1
        while True:
            if isinstance(target:=data_table[nodo_actual], int):
                for p, f in zip(personas, perm_scenarios[target][1]):
                    self.guess[p] = globals()[f]
                return

            final_question = "False"
            for var in target[0]:
                sc_response, sc_field = perm_scenarios[var]
                question = "True"
                for p, f, sfield, sresponse in zip(personas, fields, sc_field, sc_response):
                    question += f" and ({p} studies {sfield})"
                    if "Engg" not in f:
                        question += f' and ("{f}: 1?" is {sresponse})'
                final_question += f" or ({question})"
            nodo_actual = nodo_actual * 3 + responses.index(self.get_response(target[1].ask(Expr(final_question))))
